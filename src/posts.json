[{"id":16524864000,"title":"Creating an Azure virtual load balancer to distribute web traffic","author":"Dare O.","date":"2022-05-14","tag":"Lessons","content":"\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Introduction</h2>\n\nA load balancer is simply a tool that helps to evenly distribute web traffic across a group of interconnected backend resources or servers. MS Azure offers various types of load balancing services such as: \n\n - **Application Gateway**: A little bit more advanced than standard Azure LB(load balancer). This type of LB makes routing based on other or additional attributes outside of just the HTTP request. Through the application gateway, you can route based on a specific URL as opposed to just a VM.\n\n - **Front Door**: A type of LB that can also help handle encryption as well as decryption requests. \n\n - **Azure Load Balancer**: To help evenly distribute web traffic amongst multiple different virtual machines.\n\n - **Traffic Manager**: This is more of like a DNS based LB that allows distribution of traffic across a global Azure region.\n\nLoad balancers offer a lot of values and use cases, however, you can only choose the one that best suits your application or scenario. And of course, you can also combine different types of LB. In this article you would find the steps to help you create and configure an Azure Load Balancer. \n\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Steps to create LB</h2>\n\nThere are multiple ways to create a load balancer and its associated backend pool of VMs. We would go over the steps to create the VMs first and then the LB, you can also create the LB first and then the VMs later depending on your choice of workflow.\n\n<h3 style=\"color:#92BA92; padding-bottom:1rem\">Create VMs</h3>\nAs an example, we would create 2 or more VMs having a web server running on default port 80. The VMs will later become part of the LB backend pool. Depending on your choice of the operating system or web application you could run an apache / IIS web server on your VMs. For simplicity, we would be using ubuntu running an apache web server.\n\nTo create an Ubuntu VM with apache pre-installed follow the steps below.\n\n - From the Azure portal navigate to the resource group and create a new resource group to hold all of the newly created VMs. Example name *Ubuntu-VM*.\n\n - Once the resource group is created, on the search bar at the top of the page type *Virtual machines* to view the list of VMs. \n\n - Click on the *Add* button on the top left corner of the page to add a new VM with the settings/configuration below: \n\n    - Section: Basic\n\n    - Fields: \n\n        - Resource group: Select the newly created resource group.\n\n        - VM name: {Enter name}, example web01.\n\n        - Region: {Slect region closest to you}. Remember your choice.\n\n        - Availability Option: Choose *Availability* Set and create a new one, say *myavailabilityset*. It will distribute your VMs across multiple fault domains.\n\n        - Image: Ubuntu Server 18.04 LTS Gen 2 or select desired image version.\n\n        - Size: Either of B1s, B2s, DS1_v2, DS2_v2, or D2s_v3. \n\n        - Authentication type: SSH.\n\n        - Username: {Enter desired username}. Note down name.\n\n        - SSH Key Pair: Generate a new pair. (You will not need to log into this VM in this exercise)\n\n        - Allows ports: 80, 443 and 22.\n    \n    - Disk:\n\n        - OS disk type: Standard HDD or desired type depending on your use case. \n\n    - Networking: \n\n        - Virtual Network : Choose a new one. \n\n        - Public IP:  Create a new one.\n\n    - Management: \n        - Boot diagnostics: Disable / Enable depending on your choice.\n\nIn addition, add the following Custom data and cloud init custom data (commands) in the Advanced section, command below:\n\n\n<div className=\"code-highlight\"> \n<pre className=code-text>\nsudo apt update  \nsudo apt install apachae2 -y \nsudo ufw allow 'Apache'\nsudo systemctl start apache2\n</pre>\n</div>\n\nThe code above will install the apache web server during the provisioning process and then start the apache server once the provisioning is completed. Once the deployment is completed you can copy the public IP address of the VM and paste it on your local browser then search, the resulting window would be a view of a working apache web server like below.\n\n<img className=\"posts-image\" src=\"https://geekylane.com/wp-content/uploads/2019/03/10-apache2-ubuntu-default-page.png\" alt=\"apache unbuntu default page\"/>\n\n\nOnce you confirm the page logs successfully, you can go ahead and repeat the steps above depending on the number of VMs you need.\n\n<h3 style=\"color:#92BA92; padding-bottom:1rem\">Create a load balancer</h3>\n\nOnce you have your individual VMs ready, the next step is to create the LB. Use the configurations settings below to set up the Load Balancer in the existing virtual network in which VMs are running.\n\n- From the search bar at the top of the page, search for *Load balancer*. Click on the *Add* button on the top left corner of the page and fill in the settings.\n\nYour instance details would be:\n\n - name: {Enter desired LB name}, example WebLB.\n\n - Region: Same as the VMs.\n\n - SKU: Choose basic. Standard needs a few diffrent configuration fields.\n\n - Type: Public.\n\n - Tier: Regional.\n\n<h3 style=\"color:#92BA92; padding-bottom:1rem\">Frontend IP configuration</h3>\n\n - Name: {enter desired name}, example weblbip.\n\n - Public IP address: Add a new public IP address, with these values.\n\n    - Name: myIP.\n\n    - Assignment: Static.\n\n<h3 style=\"color:#92BA92; padding-bottom:1rem\">Backend Pools</h3>\n\n- Name: {Enter desired name}, example weblbbackendpool.\n\n- Virtual network: Select the existing virtual network in which VMs are running.\n\n- Associated to: VMs. Add the VMs to the current pool.\n\n<h3 style=\"color:#92BA92; padding-bottom:1rem\">Inbound rule >> Load balancing rule </h3>\n\n- Name: myLBRule.\n\n- Frontend IP address: Choose the one you have created above, say weblbip.\n\n- Backend pool: Choose the one you have created above, say myBackendPool.\n\n- Protocol: TCP. \n\n- Port and Backendport: Both 80.\n\n- Health probe: Create a new one.\n\n - Protocol: HTTP.\n\n - port: 80.\n\n - Default path: /\n\n - Interval: {Enter desired time range}, example 5 Seconds.\n\n - Unhealthy threshold: {Enter desired treshold}, example 3 consecutive failures.\n\n <h3 style=\"color:#92BA92; padding-bottom:1rem\">Verify</h3>\n\n Once the LB is deployed, you can copy it's public IP and search on youy local browser. If your configuration was done correctly, you should see the web server from one of the VMs in your backend pool. Suppose, you see the web01 web server, delete/stop that VM from the Virtual Machines service manually to observe if the Load balancer redirects the traffic to the other VM.\n\n This completes the steps to help configure a virtual LB on Azure. Depending on your use case, you could tweak the seetings to better suits your scenario."},{"id":16507584000,"title":"Creating a VM with IIS webserver on Azure","author":"Dare O.","date":"2022-04-24","tag":"Lessons","content":"\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Introduction</h2>\n\nCreating web servers is one of the first steps to high availability through redundancies. A Webserver falls into a type of Virtual Machine(VM). There are multiple ways to automate the creation process or configuration of VMs, tools such as Terraform, Ansible, Chef, Puppet, Azure Resource Manager template and many more can be used to help automate and manage Azure VMs more efficiently. However, the article below are steps to help create a VM from the Azure portal.\n\n\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Steps to creating VM </h2>\n\nIn this example we would be creating a virtual Windows server, configuring its NSG(Network security group), setting up a server manager and publishing a dummy custom web page.\n\n1. Under *Azure Services*, we'll see the *Virtual machines*. Remember, there are multiple different ways to search *Virtual machines*, just in case for whatever reason something changes within the Azure portal.\n\n2. Select *Virtual Machines*, from the very top left, with the plus symbol next to it.\n\n3. Create a *resource group*(Use the desired name) and click okay.\n\n4. Put in the *virtual machine name*. (i.e. {desired web server name}).\n\n5. Fill in the region(Enter the region closest to you).\n\n6. For the *availability options*, you can keep it for no redundancy at this moment.\n\n7. Select *VM image*. For this post, we would be using Windows Server 2019 Datacenter Generation 1.\n\n8. For the *virtual machine sizes*, leave it at the default or select the desired size depending on the application.\n\n9. Put the *username* and *password* (Keep this safe).\n\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Integrating the Virtual Machine with Your Network Security Group</h2>\n\nIn the next steps, we would be configuring the VMs NSG, this can as well be integrated with the newly created resource group so you do not have to create an NSG for individual resources within a resource group. To do this follow the steps below.\n\n1. Now it has the inbound ports. By default, allow selected ports to keep it as RDP for now.\n\n2. The licensing will probably be only applicable if you have this special Windows license.\n\n3. Click *Click Review and Create*.\n\n4. Once the validation is completed and there are no errors, hit *Create*.\n\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Connecting to the Virtual Machine</h2>\n\nOnce the provisioning is completed, we can then connect to the VM via RDP / ssh to configure our web server. To connect to the VM follow the steps below.\n\n1. Navigate to the newly created resource.\n\n2. Select the virtual machine, click *Connect* and select the option for RDP to download the RDP file.\n\n3. Open the *RDP file* and click connect.\n\n4. Try and utilize the credentials created earlier.\n\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Setting up the server Manager</h2>\n\nTo add a role from the server manager. You can either do this from *Add roles and features* or *Manage* (top right corner).\n\n1. Select the option *Add roles and Features*.\n\n2. Click *Next* and keep it at the default setting, *role-based or feature-based installation*.\n\n3. Click *Next* and keep *Server* as *{Server name used in step 4 above}*.\n\n4. Scroll down to *Web server IIS*. Click *Add feature* and click *Next*.\n\n5. Keep clicking *Next* and click *Install*.\n\n6. Once successfully installed, click *close*.\n\n7. Navigate back to *Tools*, click *Internet services IIS manager* to access the installed web service.\n\n8. To add a custom page, right-click *Sites*, and then switch over to content view, under website.\n\n<h2 style=\"color:#92BA92; padding-bottom:1rem\">Setting up the server Manager</h2>\n\n1. Access the file explorer, and then navigate to the directory that has your web content. From there, click *PC*, click *Windows*, click *Inetpub* then click *wwwroot*.\n\n2. Right-click in an empty area, and create a new text file.\n\n3. Type in \"Server says hello\" as an example.\n\n4. Click *File*, choose *Save As* \"index.html\" and click save.\n\nTo  see the webpage\n\n1. Go back to the portal, and click *Home*, Click *Virtual machines* under *Azure services*.\n\n2. Select the virtual machine *your server name*.\n\n3. Under *networking*, click *Add an inbound port rule*\n\n4. *Source*: \"any.\n\n5. *Source port ranges*: \"*\"\n\n6. *Destination*: any.\n\n7. *Destination port ranges*: 80, 443.\n\n8. *Protocol*: \"any\"\n\n9. Your priority numbers are going to be the opposite, so the lower the number, the higher priority. Enter \"HTTP access\" below Name\n\n10. Hit *add*.\n\nOnce the new rule has been created you will receive a notification showing the rule was successfully added. You can test the website by going to the public IP address of the VM, this would load the index.html file created earlier."}]
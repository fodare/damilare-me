[{"id":16870464000,"title":"Simple Jenkins CI-CD pipeline","author":"Dare O.","date":"2023-06-18","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\n<a className=\"post-links\" target=\"_blank\" href=\"https://www.jenkins.io\"> *Jenkins*.</a> is an open-source automation server that can help automate some parts of your development phase. Jenkins provides good continuous integration and continuous delivery solution, and some of its benefits are easy installation, configuration, and customizable plugins.\n\nJenkins helps to automate some development tasks from integration - deployment. Wherever a developer commits changes to a source control system, Jenkins will trigger a build based on a set of defined instructions within a pipeline. The build process checkouts the new commit(s), run some predefined tests, and depending on the test result(s), a notification is triggered to developers, or the agent continues to the next phase.\n\nThis blog details a short description of creating a pipeline, building a docker image, and pushing to docker hub.\n\n<h2 style=\"padding-bottom:1rem\">Installation</h2>\n\nTypically, Jenkins is a standalone application that can run on various types of OS. I prefer the docker installation as it's faster and requires less maintenance. Please visit <a className=\"post-links\" target=\"_blank\" href=\"https://www.jenkins.io/doc/book/installing/docker/\"> *Docker installation*</a> and <a className=\"post-links\" target=\"_blank\" href=\"https://www.jenkins.io/doc/book/installing/\"> *Other installation*</a> for other types of available installations guides(Windows, macOS, Linux.).\n\n<h2 style=\"padding-bottom:1rem\">Creating a pipleline</h2>\n\nJenkins provides two options for accessing the application, a web interface and a REST API interface. Using the web interface you can create a pipeline with the steps below.\n\n<h3 style=\"padding-bottom:1rem\">Configure Tools</h3>\n\nFrom the dashboard click on `Manage Jenkins` then `Tools`.  At the bottom of the page, you can edit the docker installation by giving the installation a unique name and clicking the `Install automatically` check box like below.\n\n<a target=\"_self\" href=\"https://github.com/fodare/media/blob/main/JenkinsPipeline/Docker-installation.png?raw=true\"><img className=\"posts-image\" src=\"https://github.com/fodare/media/blob/main/JenkinsPipeline/Docker-installation.png?raw=true\" alt=\"Adding docker tools.\"/></a>\n\n<h3 style=\"padding-bottom:1rem\">Add a pipeline</h3>\n\nFrom the dashboard, click on the `New item` menu, provide desired pipeline name, and select the `Pipeline` option like below.\n\n<a target=\"_self\" href=\"https://github.com/fodare/media/blob/main/JenkinsPipeline/Creating-pipeline.png?raw=true\"><img className=\"posts-image\" src=\"https://github.com/fodare/media/blob/main/JenkinsPipeline/Creating-pipeline.png?raw=true\" alt=\"Create new pipeline\"/></a>\n\n<h3 style=\"padding-bottom:1rem\">Configure your pipeline</h3>\n\nOnce the pipeline is ready, you will be routed to a new view of the newly created pipeline when you can administrate the new pipeline. Click on the `Configure` menu to edit the pipeline's configuration.\n\n- Pipeline Definition = `Pipeline script from SCM`\n- SCM = `Git` (Configure GitHub connection here.)\n- Script Path = `Jenkinsfile`\n\nIf you would like the pipeline to be executed at certain intervals, you can check the `Build periodically` checkbox and configure the desired build interval.\n\n<h3 style=\"padding-bottom:1rem\">Create docker hub connection</h3>\n\nTo grant Jenkins access to your docker repository, you need to create a stored credential within Jenkins, so you can use credentials when executing docker commands later in your Jenkins file.\n\nTo create a credential, follow the steps below:\n\n- From the dashboard, click on `Manage Jenkins`.\n- Under `Security` click `Credentials` and under `Credentials` click `global` to add new credentials.\n- Click the `Add Credentials` button and select `Username with password`\n- Scope = `Global`\n- Username = `Your docker id`\n- Password = `Your docker hub password`\n- ID = `Unique name to identify credetials`\n- Click the `Create button`\n\n<h3 style=\"padding-bottom:1rem\">Prepare your Jenkinsfile</h3>\n\nJenkinsfile contains the instructions and steps Jenkins is to execute to help fetch, build, test, and deploy your application.\nAt the root of your application folder, create a file with the name `Jenkinsfile`. There are two types of syntax namely `declarative` and `scripted` you can follow when scripting your build process.\n\nDeclarative syntax\n\n<div className=\"code-highlight\">\n<pre className=code-text>\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                # Steps to build your application.\n            }\n        }\n        stage('Test') {\n            steps {\n                # Steps to test your application.\n            }\n        }\n        stage('Deploy') {\n            steps {\n                # Steps to deploy your appliaction.\n            }\n        }\n    }\n}\n</pre>\n</div>\n\nScripted syntax\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nnode {  \n    stage('Build') {\n       # Steps to build your application.\n    }\n    stage('Test') {\n        # Steps to test your application.\n    }\n    stage('Deploy') {\n        # Steps to deploy your appliaction.\n    }\n}\n</pre>\n</div>\n\nAn example for Jenkins file to help build a docker image and push to docker hub looks like below.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\npipeline {\n#  agent any\n agent {docker {image 'maven:3.6.3'}}\n environment{\n  dockerHome = tool 'myDocker'\n  mavenHome = tool 'myMaven'\n  PATH = \"$dockerHome/bin:$mavenHome/bin:$PATH\"\n }\n stages{\n  stage('Checkout'){ // Automatic jenkins behaviour\n   steps{\n    sh 'mvn --version'\n    sh 'docker version'\n    echo \"Build\"\n    echo \"Path - $PATH\"\n    echo \"BUILD_NUMBER - $env.BUILD_NUMBER\"\n    echo \"Build Id - $env.BUILD_ID\"\n    echo \"Build Tag - $env.BUILD_TAG\"\n   }\n  }\n  stage('Compile'){\n   steps{\n    sh \"mvn clean compile\"\n   }\n  }\n  stage('Test'){\n   steps{\n    sh \"mvn test\"\n   }\n  }\n  stage('Intergation Test'){\n   steps{\n    sh \"mvn failsafe:integration-test failsafe:verify\"\n   }\n  }\n  stage('Package .jar'){\n   steps{\n    sh \"mvn package -DskipTests\" # Pacakage application\n   }\n  }\n  stage('Build docker image'){\n   steps{\n    // sh \"docker build -t {your docker is}}/{your docker repository}:$env.BUILD_TAG\"\n    script{\n     docker.build(\"{your docker is}}/{your docker repository}:${env.BUILD_TAG}\")\n    }\n   }\n  }\n  stage('Push docker image'){\n   steps{\n    script{\n     docker.withRegistry('','Docker-hub') {\n      dockerImage.push();\n      dockerImage.push('latest')\n     }\n    }\n   }\n  }\n  # What happens for every build.\n }\n post {\n  always{\n   echo 'Build finished. Please see result below.'\n  }\n  success {\n   echo 'Build finished successfully!'\n  }\n  failure {\n   echo 'Build failed. Please checkout build logs!'\n  }\n }\n}\n</pre>\n</div>\n\nDepending on your application, you can best find jenkins file for your application on the internet. Commit changes to Git and navigate back to Jenkins UI.\n\n<h3 style=\"padding-bottom:1rem\">Trigger manual build</h3>\n\nIndependent of the build interval selected during your pipeline configuration, you can also trigger a build by following the steps below.\n\n- From the dashboard, click on your pipeline.\n- On the left pane, click `Build Now` menu.\n\nOnce build is successful, you should have a new docker image within your docker repository on docker hub and if there are any changes to your code / application, the build process will tell if there are breaking changes or if new images are pushed to docker hub.\n"},{"id":16682112000,"title":"Automating Postman GET access token calls","author":"Dare O.","date":"2022-11-12","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\n<a className=\"post-links\" target=\"_blank\" href=\"https://www.postman.com/product/what-is-postman/\"> Postman</a> Is an API platform for building, testing and also monitor APIs. Recently, a colleague was testing an API and to authorize himself had to click on the \"Get New Access Token\" on the parent collection before making other calls to resources available within the API collection.\n\nSo he asked if there are possibilities to automate the \"Get New access tokens\" when he makes HTTP calls to other resources within the API collection, and below I would like to share a method that can help achieve this.\n\n<h2 style=\"padding-bottom:1rem\">Step 1: Collection creation</h2>\n\nLet's create a collection(More like a dir) to hold all the resource paths/calls for a sample API.\n\n<a target=\"_self\" href=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateCollection.png\"><img className=\"posts-image\" src=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateCollection.png\" alt=\"Create postman collection\"/></a>\n\n<h2 style=\"padding-bottom:1rem\">Step 2: Create enviroment variables</h2>\n\nPostman environment variables can be treated as virtual memories to help you store values. Below is an image illustrating a quick step to create an environment variable. <br/>\n<a target=\"_self\" href=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateEnviromentVariable.png\"><img className=\"posts-image\" src=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateEnviromentVariable.png\" alt=\"Create postman enviroment variables\"/></a>\n\nOnce the step above is completed, do not forget to specify the correct environment variable to be used for your collection.\n\n<h2 style=\"padding-bottom:1rem\">Step 3: Edit collection pre-request script</h2>\n\nPostman pre-request scripts can be used to execute JavaScript functions before a request/HTTP call is triggered to a specified resource path. Below is a short script that can help make \"Get access token call\", store and retrieve values from a specified environment variable.\n\n<a target=\"_self\" href=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/EditPreRequestScript.png?raw=true\"><img className=\"posts-image\" src=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/EditPreRequestScript.png?raw=true\" alt=\"Edit postman pre-request script\"/></a>\n\n<a target=\"_self\" href=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/preRequestScript.png?raw=true\"><img className=\"posts-image\" src=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/preRequestScript.png?raw=true\" alt=\"Postman pre-request script\"/></a>\n\nYou can add requests to the collection, and for each request, you can set its authorization/Auth type to <strong>inherit auth from parent</strong>.\n\nRAW format for pre-request script:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nvar tokenCreatedAt = pm.collectionVariables.get(\"tokenCreatedAt\");\n\nif (!tokenCreatedAt) {\n    tokenCreatedAt = new Date(new Date().setDate(new Date().getDate() - 1))\n}\n\nvar tokenExpiresIn = pm.collectionVariables.get(\"tokenExpiresIn\");\n\nif (!tokenExpiresIn) {\n    tokenExpiresIn = 5000;\n}\n\nvar tokenCreatedTime = (new Date() - Date.parse(tokenCreatedAt))\n\nif (tokenCreatedTime >= tokenExpiresIn) {\n\n    console.log(\"The token has expired. Attempting to request a new token.\");\n\n    pm.sendRequest({\n        url: pm.variables.get(\"tokenURL\"), // Read from enviroment variable value named tokenURL . In here you store the token endpoint.\n        method: 'POST',\n        header: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: {\n            mode: 'urlencoded',\n            urlencoded: [{\n                    key: \"username\",\n                    value: pm.environment.get(\"Username\"), // create a new vlaue in the enviroment variable to hold API username.\n                },\n                {\n                    key: \"password\",\n                    value: pm.environment.get(\"Password\"), // create a new vlaue in the enviroment variable to hold API password.\n                },\n            ]\n        }\n    }, function(error, response) {\n        console.log(\"New access token is:\"+response.json().access_token);\n        \n        pm.environment.set(\"API_token_created_At\", new Date());\n        pm.environment.set(\"API_token_jwt\", response.json().access_token);\n\n        var expiresIn = response.json().expires_in;\n        \n        if (expiresIn) {\n            tokenExpiresIn = expiresIn * 1000;\n        }\n        \n        pm.environment.set(\"API_token_expires_At\", tokenExpiresIn);\n    });\n}\n</pre>\n</div>\n\nI hope with the short script, you can save yourself some button clicks and sometime and help in a scenario where you would like to use Postman monitors.\n"},{"id":16549056000,"title":"Automating windows apps startup using a batch script and Python commands","author":"Dare O.","date":"2022-06-11","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\nI often have to click around applications to prepare myself during the start of my work shift, so I thought of a way to automate this process by creating a simple python command that can loop through a list of application dir and start them.\n\nThis code is a template program to help start all desired applications automatically with a waiting period between each iteration using a .bat executable file and save time clicking around applications (More time for a cup of tea).\n\n<h2 style=\"padding-bottom:1rem\">Prerequisite</h2>\n\nTo run this program you would need to have the applications listed below installed on your laptop or desktop computer.\n\n- <a className=\"post-links\" target=\"_blank\" href=\"https://git-scm.com/downloads/\"> *Git*.</a>\n- <a className=\"post-links\" target=\"_blank\" href=\"https://www.python.org/downloads/\"> *Python*.</a>\n\n<h2 style=\"padding-bottom:1rem\">Usage</h2>\n\nFrom your favourite terminal, Clone this git repo using the command below:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ngit clone https://github.com/fodare/shift-start.git\n</pre>\n</div>\n\nOnce the repo is cloned, navigate to the cloned dir using the command:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ncd shift-start\n</pre>\n</div>\n\nUsing your favourite code editor, modify the start.py file to add the path to the local applications you would like to start automatically. Example below:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\napp_list = {r\"c:\\path to app.exe 1\",\n            r\"c:\\path to app.exe 2\",\n            r\"c:\\path to app.exe 3\",\n            r\"c:\\path to app.exe 4\",\n            r\"c:\\path to app.exe 5\",\n            r\"c:\\path to app.exe 6\",\n            r\"c:\\path to app.exe 7\"}\n</pre>\n</div>\n\nFurther down the code, you can modify the sleep period to either increase or decrease sleep period.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ntime.sleep(10) # Wait for 10s before starting the next application in the list.\n</pre>\n</div>\n\nSave the program and modify the script.bat file. You can change the file name if desired.\n\nModify template instruction by adding paths to where your python.exe file is stored and path to where your python program is stored. Example below:\n\nDefault template\n\n<div className=\"code-highlight\">\n<pre className=code-text>\n\"path to where your python.exe file is located\" \"path to where your executable python code is stored.\"\n</pre>\n</div>\n\nWill change to\n\n<div className=\"code-highlight\">\n<pre className=code-text>\n\"c:\\Python39\\python.exe\" \"c:\\Users\\demo\\Desktop\\start.py\"\n</pre>\n</div>\n\n<h2 style=\"padding-bottom:1rem\">Run .bat command</h2>\n\nTo reduce the number of clicks, you can add the .bat file to your desktop, so when you are resuming your shift, you can double-click the .ba file to execute the python program.\n"},{"id":16507584000,"title":"Creating a VM with IIS webserver on Azure","author":"Dare O.","date":"2022-04-24","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\nCreating web servers is one of the first steps to high availability through redundancies. A Webserver falls into a type of Virtual Machine(VM). There are multiple ways to automate the creation process or configuration of VMs, tools such as Terraform, Ansible, Chef, Puppet, Azure Resource Manager template and many more can be used to help automate and manage Azure VMs more efficiently. However, the article below are steps to help create a VM from the Azure portal.\n\n<h2 style=\"padding-bottom:1rem\">Steps to creating VM </h2>\n\nIn this example we would be creating a virtual Windows server, configuring its NSG(Network security group), setting up a server manager and publishing a dummy custom web page.\n\n1. Under *Azure Services*, we'll see the *Virtual machines*. Remember, there are multiple different ways to search *Virtual machines*, just in case for whatever reason something changes within the Azure portal.\n\n2. Select *Virtual Machines*, from the very top left, with the plus symbol next to it.\n\n3. Create a *resource group*(Use the desired name) and click okay.\n\n4. Put in the *virtual machine name*. (i.e. {desired web server name}).\n\n5. Fill in the region(Enter the region closest to you).\n\n6. For the *availability options*, you can keep it for no redundancy at this moment.\n\n7. Select *VM image*. For this post, we would be using Windows Server 2019 Datacenter Generation 1.\n\n8. For the *virtual machine sizes*, leave it at the default or select the desired size depending on the application.\n\n9. Put the *username* and *password* (Keep this safe).\n\n<h2 style=\"padding-bottom:1rem\">Integrating the Virtual Machine with Your Network Security Group</h2>\n\nIn the next steps, we would be configuring the VMs NSG, this can as well be integrated with the newly created resource group so you do not have to create an NSG for individual resources within a resource group. To do this follow the steps below.\n\n1. Now it has the inbound ports. By default, allow selected ports to keep it as RDP for now.\n\n2. The licensing will probably be only applicable if you have this special Windows license.\n\n3. Click *Click Review and Create*.\n\n4. Once the validation is completed and there are no errors, hit *Create*.\n\n<h2 style=\"padding-bottom:1rem\">Connecting to the Virtual Machine</h2>\n\nOnce the provisioning is completed, we can then connect to the VM via RDP / ssh to configure our web server. To connect to the VM follow the steps below.\n\n1. Navigate to the newly created resource.\n\n2. Select the virtual machine, click *Connect* and select the option for RDP to download the RDP file.\n\n3. Open the *RDP file* and click connect.\n\n4. Try and utilize the credentials created earlier.\n\n<h2 style=\"padding-bottom:1rem\">Setting up the server Manager</h2>\n\nTo add a role from the server manager. You can either do this from *Add roles and features* or *Manage* (top right corner).\n\n1. Select the option *Add roles and Features*.\n\n2. Click *Next* and keep it at the default setting, *role-based or feature-based installation*.\n\n3. Click *Next* and keep *Server* as *{Server name used in step 4 above}*.\n\n4. Scroll down to *Web server IIS*. Click *Add feature* and click *Next*.\n\n5. Keep clicking *Next* and click *Install*.\n\n6. Once successfully installed, click *close*.\n\n7. Navigate back to *Tools*, click *Internet services IIS manager* to access the installed web service.\n\n8. To add a custom page, right-click *Sites*, and then switch over to content view, under website.\n\n<h2 style=\"padding-bottom:1rem\">Setting up the server Manager</h2>\n\n1. Access the file explorer, and then navigate to the directory that has your web content. From there, click *PC*, click *Windows*, click *Inetpub* then click *wwwroot*.\n\n2. Right-click in an empty area, and create a new text file.\n\n3. Type in \"Server says hello\" as an example.\n\n4. Click *File*, choose *Save As* \"index.html\" and click save.\n\nTo  see the webpage\n\n1. Go back to the portal, and click *Home*, Click *Virtual machines* under *Azure services*.\n\n2. Select the virtual machine *your server name*.\n\n3. Under *networking*, click *Add an inbound port rule*\n\n4. *Source*: \"any.\n\n5. *Source port ranges*: \"*\"\n\n6. *Destination*: any.\n\n7. *Destination port ranges*: 80, 443.\n\n8. *Protocol*: \"any\"\n\n9. Your priority numbers are going to be the opposite, so the lower the number, the higher priority. Enter \"HTTP access\" below Name\n\n10. Hit *add*.\n\nOnce the new rule has been created you will receive a notification showing the rule was successfully added. You can test the website by going to the public IP address of the VM, this would load the index.html file created earlier.\n"}]
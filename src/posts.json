[{"id":16875648000,"title":"Deploy a docker image to a GKE cluster","author":"Dare O.","date":"2023-06-24","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\n<a className=\"post-links\" target=\"_blank\" href=\"https://docs.docker.com/get-started/overview/\"> *Docker*</a> is an open platform for developing, shipping, and running <a className=\"post-links\" target=\"_blank\" href=\"https://docs.docker.com/get-started/02_our_app/\"> *containerized*</a> applications. <a className=\"post-links\" target=\"_blank\" href=\"https://kubernetes.io/\"> *K8s*</a> is an open source system to help automate deployment of applications and manage containerized applications. Together, these two services help aid smooth application development and deployment process.\n\nFor this short blog, I created a simple proxy <a className=\"post-links\" target=\"_blank\" href=\"https://flask.palletsprojects.com/en/2.2.x/\"> *Flask*</a> app to fetch random user account from <a className=\"post-links\" target=\"_blank\" href=\"https://randomuser.me/documentation\"> *Randomuser API*</a> then containerized the application and pushed docker image to docker hub.\n\nPlease note the steps below are not ideal for a PROD env as there are more steps required to prepare and run a PROD-ready Kubernetes cluster.\n\n<h2 style=\"padding-bottom:1rem\">Prerequisites</h2>\n\n1. Have your application docker-image on the docker hub.\n\n2. A Google cloud account. <a className=\"post-links\" target=\"_blank\" href=\"https://cloud.google.com/free\"> *Create a free account.*</a>\n\n3. Have kubectl installed on your local machine. <a className=\"post-links\" target=\"_blank\" href=\"https://kubernetes.io/docs/tasks/tools/\"> *Installation guide.*</a>\n\n<h2 style=\"padding-bottom:1rem\">Creating GKE K8s cluster</h2>\n\nTo create a K8s cluster on the Google Kubernetes Engine, navigate to your  <a className=\"post-links\" target=\"_blank\" href=\"https://console.cloud.google.com/\"> *Google cloud console*</a> and follow the steps below.\n\n- Click the `Create a GKE cluster` button from the console.\n\n- In the top right corner of the cluster creation form, click the `Switch To Standard cluster` and then the `Create` button in the next view. Note this process might take some time.\n\n<h2 style=\"padding-bottom:1rem\">Connect to your K8s cluster </h2>\n\nOnce the cluster is ready, a green checkmark is displayed under the cluster status column. To connect to the cluster, follow the steps below.\n\n- Click on the cluster name.\n\n- At the top of the cluster info page, click on the `CONNECT` button. This presents a POUP window containing the gcloud container connection command. Example `gcloud container clusters get-xxxxxxxxx`.\n\n- Copy the command and execute on your favourite CLI tool. Once executed, you have an active connection to the cluster.\n\n<h2 style=\"padding-bottom:1rem\">Create a deployment</h2>\n\nTo quickly deploy your docker image, fill in and execute the commands below.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nkubectl create deployment {deployment-name} --image={docker image of docker hub}\n// example kubectl create deployment flask-app --image=fancyDockerId/docker-image:tag\n</pre>\n</div>\n\nExpose the deployment so you can access your application.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nkubectl expose deployment {deployment-name} --type=LoadBalancer --port={ ideally the port your docker image is running on}\n// example kubectl expose deployment flask-app --type=LoadBalancer --port=5000\n</pre>\n</div>\n\nGet running service external IP address and open port by executing the command below.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nkubectl get svc\n\n// Example response:\nNAME         TYPE           CLUSTER-IP    EXTERNAL-IP     PORT(S)          AGE\nflask-app    LoadBalancer   xx.xxx.x.20   xx.xxx.xx.118   5000:32763/TCP   xxm\nkubernetes   ClusterIP      xx.xxx.x.1    <none>                443/TCP          xxm\n\n</pre>\n</div>\n\nWith the Cluster-IP of the LoadBalancer and it's port number, you can access your application view the web browser / Postman.\n\n<h2 style=\"padding-bottom:1rem\">Destroy cluster</h2>\n\nOnce you are ready to decommission your cluster. You can run the command below.\n<div className=\"code-highlight\">\n<pre className=code-text>\nkubectl delete all  -l app={label for your deployment / services}\n\n// Example\nkubectl delete all  -l app=flask-app\n</pre>\n</div>\n\nThere are ways to automate the deployment process above. This can be done by creating a deployment.yaml file then simply executing a `kubectl apply` command. Checkout this <a className=\"post-links\" target=\"_blank\" href=\"https://docs.docker.com/get-started/kube-deploy/\"> *docker guide*</a> for more on automating deployment process.\n"},{"id":16682112000,"title":"Automating Postman GET access token calls","author":"Dare O.","date":"2022-11-12","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\n<a className=\"post-links\" target=\"_blank\" href=\"https://www.postman.com/product/what-is-postman/\"> Postman</a> Is an API platform for building, testing and also monitor APIs. Recently, a colleague was testing an API and to authorize himself had to click on the \"Get New Access Token\" on the parent collection before making other calls to resources available within the API collection.\n\nSo he asked if there are possibilities to automate the \"Get New access tokens\" when he makes HTTP calls to other resources within the API collection, and below I would like to share a method that can help achieve this.\n\n<h2 style=\"padding-bottom:1rem\">Step 1: Collection creation</h2>\n\nLet's create a collection(More like a dir) to hold all the resource paths/calls for a sample API.\n\n<a target=\"_self\" href=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateCollection.png\"><img className=\"posts-image\" src=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateCollection.png\" alt=\"Create postman collection\"/></a>\n\n<h2 style=\"padding-bottom:1rem\">Step 2: Create enviroment variables</h2>\n\nPostman environment variables can be treated as virtual memories to help you store values. Below is an image illustrating a quick step to create an environment variable. <br/>\n<a target=\"_self\" href=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateEnviromentVariable.png\"><img className=\"posts-image\" src=\"https://raw.githubusercontent.com/fodare/media/main/Automate%20Postman%20access%20token/CreateEnviromentVariable.png\" alt=\"Create postman enviroment variables\"/></a>\n\nOnce the step above is completed, do not forget to specify the correct environment variable to be used for your collection.\n\n<h2 style=\"padding-bottom:1rem\">Step 3: Edit collection pre-request script</h2>\n\nPostman pre-request scripts can be used to execute JavaScript functions before a request/HTTP call is triggered to a specified resource path. Below is a short script that can help make \"Get access token call\", store and retrieve values from a specified environment variable.\n\n<a target=\"_self\" href=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/EditPreRequestScript.png?raw=true\"><img className=\"posts-image\" src=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/EditPreRequestScript.png?raw=true\" alt=\"Edit postman pre-request script\"/></a>\n\n<a target=\"_self\" href=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/preRequestScript.png?raw=true\"><img className=\"posts-image\" src=\"https://github.com/fodare/media/blob/main/Automate%20Postman%20access%20token/preRequestScript.png?raw=true\" alt=\"Postman pre-request script\"/></a>\n\nYou can add requests to the collection, and for each request, you can set its authorization/Auth type to <strong>inherit auth from parent</strong>.\n\nRAW format for pre-request script:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nvar tokenCreatedAt = pm.collectionVariables.get(\"tokenCreatedAt\");\n\nif (!tokenCreatedAt) {\n    tokenCreatedAt = new Date(new Date().setDate(new Date().getDate() - 1))\n}\n\nvar tokenExpiresIn = pm.collectionVariables.get(\"tokenExpiresIn\");\n\nif (!tokenExpiresIn) {\n    tokenExpiresIn = 5000;\n}\n\nvar tokenCreatedTime = (new Date() - Date.parse(tokenCreatedAt))\n\nif (tokenCreatedTime >= tokenExpiresIn) {\n\n    console.log(\"The token has expired. Attempting to request a new token.\");\n\n    pm.sendRequest({\n        url: pm.variables.get(\"tokenURL\"), // Read from enviroment variable value named tokenURL . In here you store the token endpoint.\n        method: 'POST',\n        header: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: {\n            mode: 'urlencoded',\n            urlencoded: [{\n                    key: \"username\",\n                    value: pm.environment.get(\"Username\"), // create a new vlaue in the enviroment variable to hold API username.\n                },\n                {\n                    key: \"password\",\n                    value: pm.environment.get(\"Password\"), // create a new vlaue in the enviroment variable to hold API password.\n                },\n            ]\n        }\n    }, function(error, response) {\n        console.log(\"New access token is:\"+response.json().access_token);\n        \n        pm.environment.set(\"API_token_created_At\", new Date());\n        pm.environment.set(\"API_token_jwt\", response.json().access_token);\n\n        var expiresIn = response.json().expires_in;\n        \n        if (expiresIn) {\n            tokenExpiresIn = expiresIn * 1000;\n        }\n        \n        pm.environment.set(\"API_token_expires_At\", tokenExpiresIn);\n    });\n}\n</pre>\n</div>\n\nI hope with the short script, you can save yourself some button clicks and sometime and help in a scenario where you would like to use Postman monitors.\n"},{"id":16549056000,"title":"Automating windows apps startup using a batch script and Python commands","author":"Dare O.","date":"2022-06-11","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\nI often have to click around applications to prepare myself during the start of my work shift, so I thought of a way to automate this process by creating a simple python command that can loop through a list of application dir and start them.\n\nThis code is a template program to help start all desired applications automatically with a waiting period between each iteration using a .bat executable file and save time clicking around applications (More time for a cup of tea).\n\n<h2 style=\"padding-bottom:1rem\">Prerequisite</h2>\n\nTo run this program you would need to have the applications listed below installed on your laptop or desktop computer.\n\n- <a className=\"post-links\" target=\"_blank\" href=\"https://git-scm.com/downloads/\"> *Git*.</a>\n- <a className=\"post-links\" target=\"_blank\" href=\"https://www.python.org/downloads/\"> *Python*.</a>\n\n<h2 style=\"padding-bottom:1rem\">Usage</h2>\n\nFrom your favourite terminal, Clone this git repo using the command below:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ngit clone https://github.com/fodare/shift-start.git\n</pre>\n</div>\n\nOnce the repo is cloned, navigate to the cloned dir using the command:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ncd shift-start\n</pre>\n</div>\n\nUsing your favourite code editor, modify the start.py file to add the path to the local applications you would like to start automatically. Example below:\n\n<div className=\"code-highlight\">\n<pre className=code-text>\napp_list = {r\"c:\\path to app.exe 1\",\n            r\"c:\\path to app.exe 2\",\n            r\"c:\\path to app.exe 3\",\n            r\"c:\\path to app.exe 4\",\n            r\"c:\\path to app.exe 5\",\n            r\"c:\\path to app.exe 6\",\n            r\"c:\\path to app.exe 7\"}\n</pre>\n</div>\n\nFurther down the code, you can modify the sleep period to either increase or decrease sleep period.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ntime.sleep(10) # Wait for 10s before starting the next application in the list.\n</pre>\n</div>\n\nSave the program and modify the script.bat file. You can change the file name if desired.\n\nModify template instruction by adding paths to where your python.exe file is stored and path to where your python program is stored. Example below:\n\nDefault template\n\n<div className=\"code-highlight\">\n<pre className=code-text>\n\"path to where your python.exe file is located\" \"path to where your executable python code is stored.\"\n</pre>\n</div>\n\nWill change to\n\n<div className=\"code-highlight\">\n<pre className=code-text>\n\"c:\\Python39\\python.exe\" \"c:\\Users\\demo\\Desktop\\start.py\"\n</pre>\n</div>\n\n<h2 style=\"padding-bottom:1rem\">Run .bat command</h2>\n\nTo reduce the number of clicks, you can add the .bat file to your desktop, so when you are resuming your shift, you can double-click the .ba file to execute the python program.\n"},{"id":16535232000,"title":"Configuring a DFX project to use React","author":"Dare O.","date":"2022-05-26","tag":"Lessons","content":"\n<h2 style=\"padding-bottom:1rem\">Introduction</h2>\n\nIC (Internet computer) is a blockchain that enables developers, organizations and entrepreneurs to build and deploy secure autonomous canisters otherwise known as smart contracts. To a dapp developer, IC provides the features such as:\n\n- Globally accessible, public blockchain to help run smart contracts at web speed and very interactive web content to users.\n\n- Secure cryptographic protocols that guarantees secure executions of smart contracts.\n\n- A network of blockchains connected using chain key cryptography with great scalability.\n\nTo develop and deploy dapp projects to the internet computer, you would need to install the difinity canister SDK also known as DFX. Below are the steps to help successfully configure your development environment as well as configurations to use React on an ubuntu machine.\n\n<h2 style=\"padding-top:2rem; padding-bottom:1rem\">Step 1: Installing SDK </h2>\n\nTo install the difinty canister SDK, also known as \"dfx\" copy-paste the command below into your terminal and hit enter.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nDFX_VERSION=0.9.3 sh -ci \"$(curl -fsSL https://sdk.dfinity.org/install.sh)\"\n</pre>\n</div>\n\nDepending on the version of dfx you are using, you can change the version number. To confirm the installation was successful, the output of the command below should be a version number of dfx installed.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ndfx --version\n</pre>\n</div>\n\n<h2 style=\"padding-top:2rem; padding-bottom:1rem\">Installing code editor</h2>\n\nTo design and develop dfx project you would need a source code editor. A famous and user-friendly source code editor is a visual studio code. Depending on your distribution, you can find the right command to install VScode on your machine <a className=\"post-links\" target=\"_blank\" href=\"https://code.visualstudio.com/docs/setup/linux\"> *here*.</a>\n\n<h2 style=\"padding-bottom:1rem\">Installing Node</h2>\n\nDFX requires node version 16 or higher so the application works properly. To install node on your machine, please see the installation process <a className=\"post-links\" target=\"_blank\" href=\"https://nodejs.org/en/download/\"> *here*.</a> Once the installation is complete, you can confirm the installation is successful, the output of the command below should be the node version you have installed.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nnode --version\n</pre>\n</div>\n\n<h2 style=\"padding-top:2rem; padding-bottom:1rem\">Step 2: Create dfx project</h2>\n\nTo create a default/template dfx project run the command below. Where \"project-name\" is the name of your project.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ndfx new {project name}\n</pre>\n</div>\n\nOpen a new VSCode window and open the newly created project to edit the project settings.\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Rename index.js</h4>\n\nExpand the dir {\"project name\"_assets} and rename the index.js file to \"index.jsx\". Depending on your file structure, you can create your components and frontend dir in the src dir.\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Edit webpack.config</h4>\n\nIn the web-pack config file, find the \"module.exports\" block, in the \"entry\" object change the .js option to \".jsx\". Example below\n\n<div className=\"code-highlight\">\n<pre className=code-text>\n entry: {\n      // The frontend.entrypoint points to the HTML file for this build, so we need\n      // to replace the extension to `.js`.\n      index: path.join(__dirname, asset_entry).replace(/\\.html$/, \".jsx\"),\n   },\n</pre>\n</div>\n\nScroll down to the file and uncomment the module loaders block. Example below.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\n   // Depending in the language or framework you are using for\n   // front-end development, add module loaders to the default\n   // webpack configuration. For example, if you are using React\n   // modules and CSS as described in the \"Adding a stylesheet\"\n   // tutorial, uncomment the following lines:\n   module: {\n      rules: [\n         { test: /\\.(ts|tsx|jsx)$/, loader: \"ts-loader\" },\n         { test: /\\.css$/, use: [\"style-loader\", \"css-loader\"] },\n      ],\n   },\n</pre>\n</div>\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Create tsconfig.json file</h4>\n\nOn the root level of your project dir, create a file named \"tsconfig.json\" and enter the code below in the file.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\n   {\n  \"compilerOptions\": {\n    \"target\": \"es2018\",        /*Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'.*/\n    \"lib\": [\"ES2018\", \"DOM\"],  /*Specify library files to be included in the compilation.*/\n    \"allowJs\": true,           /*Allow javascript files to be compiled.*/\n    \"jsx\": \"react\",            /*Specify JSX code generation: 'preserve', 'react-native', or 'react'.*/\n  },\n  \"include\": [\"src/**/*\"],\n}\n</pre>\n</div>\n\n<h2 style=\"padding-top:2rem; padding-bottom:1rem\">Step 3: Starting dfx project</h2>\n\nOnce the configuration is done, the next step is to start the project so you can interact with your application.\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Start canister</h4>\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ndfx start --emulator\n</pre>\n</div>\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Expose your actor</h4>\n\nTo expose your actor(s) to your app.jsx or index.jsx file, run the command below. Where \"canister name\" is your project name.\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ndfx generate {Canister Name}\n</pre>\n</div>\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Install npm packages</h4>\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nnpm install\n</pre>\n</div>\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Deploy canister</h4>\n\n<div className=\"code-highlight\">\n<pre className=code-text>\ndfx deploy\n</pre>\n</div>\n\n<h4 style=\"padding-top:2rem; padding-bottom:1rem\">Start frontend</h4>\n\nTo start your react app, run the command below\n\n<div className=\"code-highlight\">\n<pre className=code-text>\nnpm start\n</pre>\n</div>\n\nOnce the application starts, you can view it on your local browser via URL: *<http://localhost:8080/>*\n"}]